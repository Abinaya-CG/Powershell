properties([ 
    parameters([
        [
            $class: 'ChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Select a choice', 
            filterLength: 1, 
            filterable: true, 
            name: 'choice1', 
            randomName: 'choice-parameter-7601235200970', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 'return ["ERROR"]'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 'return[\'aaa\',\'bbb\']'
                ]
            ]
        ], 
        [
            $class: 'CascadeChoiceParameter', 
            choiceType: 'PT_SINGLE_SELECT', 
            description: 'Active Choices Reactive parameter', 
            filterLength: 1, 
            filterable: true, 
            name: 'choice2', 
            randomName: 'choice-parameter-7601237141171', 
            referencedParameters: 'choice1', 
            script: [
                $class: 'GroovyScript', 
                fallbackScript: [
                    classpath: [], 
                    sandbox: false, 
                    script: 'return ["error"]'
                ], 
                script: [
                    classpath: [], 
                    sandbox: false, 
                    script: 'if(choice1.equals("aaa")){return [\'a\', \'b\']} else {return [\'aaaaaa\',\'fffffff\']}'
                ]
            ]
        ]
    ])
])
pipeline {
  agent  {
   node {
        label 'optim' 
       }
  }
  parameters {
        choice(name: 'ENVIRONMENT', choices: "${environments}")
    }
  stages {
    stage('version') {
      steps {
        script {
          def mapList=[]
          def headers=[]
          def file = readFile "optim_mapping.csv"
          file.readLines().eachWithIndex { row, index ->
           if (index == 0) { 
             headers = row.tokenize(",")
             echo "$headers"
           }
           else {
             def tmpMap = [:]
             def cells = row.split(',').eachWithIndex { cell, cellIndex ->
             tmpMap[headers[cellIndex]] = cell
           }
           mapList.add(tmpMap)
           }
          echo "$mapList"
           
           }
       }
      }
    }
    stage('hello') {
      steps {
        powershell 'Write-Output "HI!!"'
      }
    }
  }
}
