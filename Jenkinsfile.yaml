
pipeline {
  agent  {
   node {
        label 'optim' 
       }
  }
  stages {
    stage('version') {
      steps {
        script {
          def mapList=[]
          def headers=[]
          def file = readFile "optim_mapping.csv"
          file.readLines().eachWithIndex { row, index ->
           if (index == 0) { 
             headers = row.tokenize(",")
             echo "$headers"
           }
           else {
             def tmpMap = [:]
             def cells = row.split(',').eachWithIndex { cell, cellIndex ->
             tmpMap[headers[cellIndex]] = cell
           }
           mapList.add(tmpMap)
           }
          echo "$mapList"
           
           }
       }
       properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'mapList[header[0]]', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false,
        script:  categories]]],
[$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',name: 'Items', referencedParameters: 'Categories', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: items]]]
    ])
])
      }
    }
    stage('hello') {
      steps {
        powershell 'Write-Output "HI!!"'
      }
    }
  }
}
