def getmapList(){
def mapList=[]
def headers=[]
def file = readFile "optim_mapping.csv"
file.readLines().eachWithIndex { row, index ->
if (index == 0) { 
             headers = row.tokenize(",")
             echo "$headers"
           }
           else {
             def tmpMap = [:]
             def cells = row.split(',').eachWithIndex { cell, cellIndex ->
             tmpMap[headers[cellIndex]] = cell
           }
           mapList.add(tmpMap)
           }
}
return mapList
}
pipeline {
  agent  {
   node {
        label 'optim' 
       }
  }
  stages {
    stage('version') {
      steps {
        script{
          properties([
                            parameters([
                                [$class: 'ChoiceParameter', 
                                    choiceType: 'PT_SINGLE_SELECT', 
                                    description: 'Select the Application from the Dropdown List', 
                                    filterLength: 1, 
                                    filterable: false, 
                                    name: 'Env', 
                                    script: [
                                        $class: 'GroovyScript', 
                                        fallbackScript: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script: 
                                                "return['Could not get The environemnts']"
                                        ], 
                                        script: [
                                            classpath: [], 
                                            sandbox: false, 
                                            script:'''
                                                List result=getmapList()
                                                "return [result.Server]"
                                                '''
                                        ]
                                    ]
                                ]
                                ])
           ])
          echo "{$Env}"
        }
      }
    }
    stage('hello') {
      steps {
        powershell 'Write-Output "HI!!"'
      }
    }
  }
}
